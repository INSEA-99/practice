name: Auto Assign & Auto Merge PR

on:
  pull_request_target:
    branches:
      - main
    types:
      - opened
      - reopened
  pull_request_review:
    types:
      - submitted

jobs:
  manage-pr:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ PR 열릴 때: 기여자 중 최대 2명 랜덤 리뷰어 지정, 없으면 즉시 머지
      - name: Assign up to 2 random reviewers from collaborators, or auto merge if none
        id: assign_reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 저장소 collaborator 목록 가져오기
            let members = [];
            let page = 1;
            while (true) {
              const { data } = await github.rest.repos.listCollaborators({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page
              });
              if (data.length === 0) break;
              members = members.concat(data.map(u => u.login));
              page++;
            }

            // PR 작성자 제외
            const author = context.payload.pull_request.user.login;
            members = members.filter(u => u !== author);

            let reviewers = [];
            if (members.length >= 2) {
              reviewers = members.sort(() => 0.5 - Math.random()).slice(0, 2);
            } else if (members.length === 1) {
              reviewers = [members[0]];
            }

            // PR description에 reviewers 정보를 기록
            const reviewersNote = `<!-- reviewers: ${reviewers.join(',')} -->`;
            const origBody = context.payload.pull_request.body || '';
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: `${origBody}\n${reviewersNote}`
            });

            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: reviewers
              });
              console.log("Assigned reviewers:", reviewers);
              return reviewers.join(',');
            } else {
              // 리뷰어가 없으면 바로 머지
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
              console.log("No eligible reviewers. PR auto merged.");
              return '';
            }

      # 2️⃣ 리뷰 제출시: 모든 리뷰어가 승인하면 자동 머지 (CHANGES_REQUESTED가 있으면 머지 안함)
      - name: Auto merge if all reviewers approved
        if: github.event_name == 'pull_request_review'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.payload.pull_request.number;

            // PR description에서 reviewers 정보 추출
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            const body = pr.body || '';
            const reviewersMatch = body.match(/<!-- reviewers: ([^>]*)-->/);
            const reviewers = reviewersMatch && reviewersMatch[1]
              ? reviewersMatch[1].split(',').map(r => r.trim()).filter(r => r.length > 0)
              : [];

            if (reviewers.length === 0) {
              console.log("No reviewers found in PR description. Nothing to do.");
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // 각 리뷰어의 마지막 리뷰 상태 추적
            const reviewStates = {};
            reviewers.forEach(reviewer => {
              const userReviews = reviews.filter(r => r.user.login === reviewer);
              if (userReviews.length > 0) {
                reviewStates[reviewer] = userReviews[userReviews.length - 1].state;
              }
            });

            console.log("Review states:", reviewStates);

            // CHANGES_REQUESTED가 있으면 머지 안함
            if (Object.values(reviewStates).includes("CHANGES_REQUESTED")) {
              console.log("One or more reviewers requested changes. Not merging.");
              return;
            }

            // 모두 APPROVED면 자동 머지
            if (reviewers.every(reviewer => reviewStates[reviewer] === "APPROVED")) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              console.log("All reviewers approved. PR auto merged.");
            } else {
              console.log("Waiting for all reviewers to approve.");
            }
