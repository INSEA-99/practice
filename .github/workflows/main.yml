name: Auto Assign, Close or Merge PR

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
  pull_request_review:
    types:
      - submitted

jobs:
  manage-pr:
    runs-on: ubuntu-latest
    steps:

      # 1️⃣ PR 열릴 때 랜덤 리뷰어 1명 지정
      - name: Assign 1 random reviewer
        id: assign
        uses: actions/github-script@v7
        with:
          script: |
            const org = context.repo.owner;
            let members = [];
            let page = 1;

            // 조직 멤버 가져오기
            while(true){
              const { data } = await github.rest.orgs.listMembers({
                org,
                per_page: 100,
                page
              });
              if(data.length === 0) break;
              members = members.concat(data.map(u => u.login));
              page++;
            }

            // PR 작성자 제외
            const author = context.payload.pull_request.user.login;
            members = members.filter(u => u !== author);

            // 랜덤 1명 선택
            const shuffled = members.sort(() => 0.5 - Math.random());
            const reviewer = shuffled[0];

            // 리뷰어 지정
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: [reviewer]
            });

            console.log("Assigned reviewer:", reviewer);
            return reviewer;
          token: ${{ secrets.ORG_ACCESS_TOKEN }}

      # 2️⃣ 리뷰 제출 감지 후 Close / Merge 처리
      - name: Check review and act
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.payload.pull_request.number;

            const reviewer = steps.assign.outputs.result;

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // 리뷰어 상태 확인
            let reviewState = null;
            reviews.forEach(r => {
              if(r.user.login === reviewer) {
                reviewState = r.state;
              }
            });

            console.log(`Review state for ${reviewer}:`, reviewState);

            // 변경 요청 시 PR Close
            if (reviewState === "CHANGES_REQUESTED") {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `⚠️ PR 자동 반려: 리뷰어가 변경 요청했습니다.`
              });
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                state: "closed"
              });
              console.log("PR closed due to changes requested.");
              return;
            }

            // Approve 시 자동 Merge
            if (reviewState === "APPROVED") {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });
              console.log("PR auto merged.");
            } else {
              console.log("Waiting for reviewer to approve.");
            }
          token: ${{ secrets.ORG_ACCESS_TOKEN }}
